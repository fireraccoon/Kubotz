diff --git a/core/src/com/brm/Kubotz/Events/TakeDamageEvent.java b/core/src/com/brm/Kubotz/Events/TakeDamageEvent.java
index a2619c7..6f26cef 100644
--- a/core/src/com/brm/Kubotz/Events/TakeDamageEvent.java
+++ b/core/src/com/brm/Kubotz/Events/TakeDamageEvent.java
@@ -1,5 +1,6 @@
 package com.brm.Kubotz.Events;
 
+import com.badlogic.gdx.math.Vector2;
 import com.brm.GoatEngine.ECS.core.Entity.Event;
 
 /**
@@ -7,8 +8,38 @@ import com.brm.GoatEngine.ECS.core.Entity.Event;
  */
 public class TakeDamageEvent extends Event {
 
-    public TakeDamageEvent(String entityId){
+    private final float damage;
+    private final Vector2 knockback;
+
+
+    /**
+     * Ctor with no Knockback
+     * @param entityId the entity being damaged, the target
+     * @param damagerId the entity inflicting the damage to the target
+     * @param damage the amount of damage to inflict
+     */
+    public TakeDamageEvent(String entityId, String damagerId, float damage) {
+        this(entityId, damagerId, damage, new Vector2(0,0));
+    }
+
+    /**
+     * Ctor
+     * @param entityId the entity being damaged, the target
+     * @param damagerId the entity inflicting the damage to the target
+     * @param damage the amount of damage to inflict
+     * @param knockback the knockback associated
+     */
+    public TakeDamageEvent(String entityId, String damagerId, float damage, Vector2 knockback){
         super(entityId);
+        this.damage = damage;
+        this.knockback = knockback;
     }
 
+    public float getDamage() {
+        return damage;
+    }
+
+    public Vector2 getKnockback() {
+        return knockback;
+    }
 }
diff --git a/core/src/com/brm/Kubotz/Systems/AttackSystems/MeleeSystem.java b/core/src/com/brm/Kubotz/Systems/AttackSystems/MeleeSystem.java
index 9f31c85..9183e97 100644
--- a/core/src/com/brm/Kubotz/Systems/AttackSystems/MeleeSystem.java
+++ b/core/src/com/brm/Kubotz/Systems/AttackSystems/MeleeSystem.java
@@ -4,13 +4,15 @@ import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.physics.box2d.CircleShape;
 import com.badlogic.gdx.physics.box2d.Fixture;
 import com.badlogic.gdx.physics.box2d.FixtureDef;
-import com.brm.GoatEngine.ECS.utils.Components.PhysicsComponent;
 import com.brm.GoatEngine.ECS.core.Entity.Entity;
+import com.brm.GoatEngine.ECS.core.Entity.Event;
 import com.brm.GoatEngine.ECS.core.Systems.EntitySystem;
+import com.brm.GoatEngine.ECS.utils.Components.PhysicsComponent;
 import com.brm.GoatEngine.Input.VirtualGamePad;
-import com.brm.GoatEngine.Utils.Logger;
 import com.brm.Kubotz.Components.MeleeComponent;
 import com.brm.Kubotz.Constants;
+import com.brm.Kubotz.Events.CollisionEvent;
+import com.brm.Kubotz.Events.TakeDamageEvent;
 import com.brm.Kubotz.Input.GameButton;
 
 /**
@@ -45,6 +47,7 @@ public class MeleeSystem extends EntitySystem{
             if(meleeComponent.getCooldown().isDone() && meleeComponent.getDurationTimer().isDone()){
                 meleeComponent.getDurationTimer().reset();
                 createAttackBox(phys);
+                // TODO FIRE EVENT
             }
         }
     }
@@ -65,6 +68,45 @@ public class MeleeSystem extends EntitySystem{
     }
 
 
+    @Override
+    public <T extends Event> void onEvent(T event) {
+        if(event.getClass() == CollisionEvent.class){
+            onCollision((CollisionEvent) event);
+        }
+    }
+
+
+    /**
+     * Calls when a collision occurs
+     * tries to find it something collided with a
+     * melee attack box
+     * @param e
+     */
+    private void onCollision(CollisionEvent e){
+        if(e.getDescriber() == CollisionEvent.Describer.END){
+            return;
+        }
+        if(e.getEntityA() == null || e.getEntityB() == null){
+                return;
+        }
+
+        if(e.getFixtureA().getUserData().equals(Constants.FIXTURE_MELEE_ATTACK)){
+            MeleeComponent comp = (MeleeComponent) e.getEntityA().getComponent(MeleeComponent.ID);
+
+            //FIRE A TAKE DAMAGE EVENT
+            this.fireEvent(new TakeDamageEvent(
+                    e.getEntityB().getID(),
+                    e.getEntityA().getID(),
+                    comp.getDamage(),
+                    comp.getKnockBack()
+                    )
+            );
+        }
+
+    }
+
+
+
     /**
      * Creates an attack box for the melee attack
      * @param phys
diff --git a/core/src/com/brm/Kubotz/Systems/DamageSystem.java b/core/src/com/brm/Kubotz/Systems/DamageSystem.java
index 6a0967b..9fae2d1 100644
--- a/core/src/com/brm/Kubotz/Systems/DamageSystem.java
+++ b/core/src/com/brm/Kubotz/Systems/DamageSystem.java
@@ -1,6 +1,7 @@
 package com.brm.Kubotz.Systems;
 
 import com.badlogic.gdx.math.Vector2;
+import com.brm.GoatEngine.ECS.core.Entity.Event;
 import com.brm.GoatEngine.ECS.utils.Components.HealthComponent;
 import com.brm.GoatEngine.ECS.utils.Components.PhysicsComponent;
 import com.brm.GoatEngine.ECS.core.Entity.Entity;
@@ -9,6 +10,8 @@ import com.brm.GoatEngine.Utils.Logger;
 import com.brm.Kubotz.Components.DamageComponent;
 import com.brm.Kubotz.Components.Powerups.EnergeticShieldComponent;
 import com.brm.Kubotz.Components.Powerups.InvincibilityComponent;
+import com.brm.Kubotz.Events.CollisionEvent;
+import com.brm.Kubotz.Events.TakeDamageEvent;
 
 /**
  * Used to deal damage and process Health Bonuses
@@ -25,74 +28,70 @@ public class DamageSystem extends EntitySystem{
 
     @Override
     public void update(float dt){
-        //Process collisions
-        /*for(Entity e: getEntityManager().getEntitiesWithComponent(DamageComponent.ID)){
-            PhysicsComponent phys = (PhysicsComponent) e.getComponent(PhysicsComponent.ID);
-
-            for(int i=0; i< phys.getContacts().size(); i++){
-                EntityContact contact = phys.getContacts().get(i);
-                //The the other entity can be Hit handle damage
-                if(contact.getEntityB().hasComponent(HealthComponent.ID)){
-
-                    //Only hit the torso //TODO this is a quick fix (hack) to prevent 3 fixture damamge
-                    if(contact.fixtureB.getUserData().equals(Constants.FIXTURE_TORSO)){
-                        handleDamage(contact.getEntityA(), contact.getEntityB());
-                        //REMOVE CONTACTS
-                        phys.getContacts().remove(i);
-                        PhysicsComponent physB = (PhysicsComponent) contact.getEntityB().getComponent(PhysicsComponent.ID);
-                        physB.getContacts().remove(contact);
-                    }
-                }
-            }
-        }*/
+        // TODO ON GOING DAMAGE ? LIKE BURNING
     }
 
 
+    @Override
+    public <T extends Event> void onEvent(T event) {
+        if(event.getClass() == TakeDamageEvent.class){
+            onTakeDamage((TakeDamageEvent) event);
+        }
+    }
+
     /**
-     * Process damage between an entity and a target entity
-     * @param damageAgent the entity dealing damage
-     * @param target the entity receiving the damage
+     * Listens to take damage events.
+     * Tries to apply damage according
+     * to the situation and the data
+     * provided by the event
+     * @param e
      */
-    private void handleDamage(Entity damageAgent, Entity target){
-        //Damager
-        PhysicsComponent damagerPhys = (PhysicsComponent) damageAgent.getComponent(PhysicsComponent.ID);
-        DamageComponent damageComp = (DamageComponent)damageAgent.getComponent(DamageComponent.ID);
-
-
-        //Target
-        PhysicsComponent targetPhys = (PhysicsComponent) target.getComponent(PhysicsComponent.ID);
-        HealthComponent targetHealth = (HealthComponent) target.getComponent(HealthComponent.ID);
+    private void onTakeDamage(TakeDamageEvent e){
+        Entity target = getEntityManager().getEntity(e.getEntityId());
+        if(!target.hasComponent(HealthComponent.ID) ||target.hasComponent(InvincibilityComponent.ID) ){
+            return;
+        }
 
+        PhysicsComponent targetPhys = (PhysicsComponent)target.getComponent(PhysicsComponent.ID);
+        HealthComponent targetHealth = (HealthComponent)target.getComponent(HealthComponent.ID);
 
         //Damage Health
-        //Invinvible
-        if(target.hasComponent(InvincibilityComponent.ID)){
-            return;
-        }//Energetic Shield
-        else if(target.hasComponent(EnergeticShieldComponent.ID)){
-            EnergeticShieldComponent shield = (EnergeticShieldComponent) target.getComponent(EnergeticShieldComponent.ID);
-            shield.takeDamage(damageComp.getDamage());
 
+        //Energetic Shield
+        if(target.hasComponent(EnergeticShieldComponent.ID)){
+            EnergeticShieldComponent shield = (EnergeticShieldComponent) target.getComponent(EnergeticShieldComponent.ID);
+            shield.takeDamage(e.getDamage());
             //Is shield dead? If so remove it
             if(shield.isDead()){
                 target.removeComponent(EnergeticShieldComponent.ID);
+                // TODO Shield Exploded Event?
             }
         }else{
-            targetHealth.substractAmount(damageComp.getDamage());
+            // There is no protection let's take that hit!
+            targetHealth.substractAmount(e.getDamage());
 
             //KnockBack
-            Vector2 knockBack = damageComp.getKnockBack().cpy();
-            if(damagerPhys.getDirection() == PhysicsComponent.Direction.LEFT){
+            Vector2 knockBack = e.getKnockback().cpy();
+            /*if(damagerPhys.getDirection() == PhysicsComponent.Direction.LEFT){
                 knockBack.x *= -1;
-            }
-
+            }*/
             targetPhys.getBody().applyLinearImpulse(knockBack.x, knockBack.y,
                     targetPhys.getPosition().x,
                     targetPhys.getPosition().y,
                     true);
-
         }
         Logger.log(targetHealth.getAmount());
+
+
+
+        //Now is the target ... dead ?
+        if(targetHealth.isDead()){
+
+            // TODO Fire Event player dead
+            // TODO Fire event player killed another player
+
+        }
+
     }
 
 
@@ -100,4 +99,8 @@ public class DamageSystem extends EntitySystem{
 
 
 
+
+
+
+
 }
